package main

import (
	"bufio"
	"bytes"
	"fmt"
	"github.com/spf13/viper"
	"github.com/stevenwilliamson/puppetenvreporter/slack"
	"io"
	"log"
	"os"
	"os/exec"
	"regexp"
	"strings"
)

type puppetReport struct {
	Report string
}

type puppetReporter interface {
}

// parsePuppetEnv
// Will parse a puppet environment and its node from a puppet environment report
func parsePuppetEnv(scanner *bufio.Scanner) (found bool, environment, nodes string, err error) {
	environmentRegExp := regexp.MustCompile(" [A-Za-z0-9]+")
	nodeRegExp := regexp.MustCompile(" {2,8}[A-Za-z0-9]+")
	for scanner.Scan() {
		s := scanner.Text()
		if environmentRegExp.MatchString(s) {
			// Were on an environment stanza parse the nodes until the next blank line
			environment = s
			break
		}
	}
	if environment == "" || strings.Contains(environment, "rpc stats") {
		return false, "", "", nil
	}

	nodesBuffer := bytes.NewBuffer(nil)

	// Now parse the nodes
	for scanner.Scan() {
		s := scanner.Text()
		if nodeRegExp.MatchString(s) {
			// we have a node store it
			nodesBuffer.WriteString(s + "\n")
		} else {
			// blank line end of nodes
			break
		}
	}
	return true, environment, nodesBuffer.String(), nil
}

// parsePuppetReport
// Parses a report generated by the mco puppetd environment plugin
// See the tests for example use and the data format
func parsePuppetReport(data io.Reader) ([]byte, error) {
	scanner := bufio.NewScanner(data)
	reportBuf := bytes.NewBuffer(nil)
	for scanner.Scan() {
		if strings.Contains(scanner.Text(), "Environments") {
			// We found the start of the environments list now we call parsePuppetEnv
			// until it stops finding environments to parse
			for found, env, nodes, err := parsePuppetEnv(scanner); found == true; found, env, nodes, err = parsePuppetEnv(scanner) {
				if err != nil {
					return nil, fmt.Errorf("Error parsing report environment in report: %v", err)
				}
				if strings.Contains(env, " production ") {
					continue
				}
				reportBuf.WriteString(env + "\n")
				reportBuf.WriteString(nodes)
				reportBuf.WriteString("\n\n")
			}
		}
	}
	return reportBuf.Bytes(), nil

}

func main() {

	logger := log.New(os.Stderr, "puppetenvreporter: ", log.Lshortfile)

	// Find and process configuration
	viper.SetConfigName("puppetenvreporter")
	viper.AddConfigPath("/opt/local/etc/puppetenvreporter")
	viper.AddConfigPath("/opt/local/etc")
	viper.AddConfigPath(".")

	viper.SetDefault("channel", "#ops-chat")
	viper.SetDefault("username", "Einstien")

	err := viper.ReadInConfig()
	if err != nil {
		logger.Fatal(fmt.Sprintf("Error reading configuration %v", err))
	}

	if !viper.IsSet("slack_api_token") {
		logger.Fatal("Require a slack_api_token to be set in configuration")
	}
	slackToken := viper.GetString("slack_api_token")

	out, err := exec.Command("/opt/local/bin/mco", "puppetd", "-v", "environment").Output()
	if err != nil {
		logger.Fatal(err)
	}
	reportData := bytes.NewReader(out)
	report, err := parsePuppetReport(reportData)
	if err != nil {
		logger.Fatal(err)
	}

	client := slack.SlackClient{Token: slackToken}
	client.PostMessage(
		string(report),
		slack.Channel(viper.GetString("channel")),
		slack.Username(viper.GetString("username")),
	)
}
